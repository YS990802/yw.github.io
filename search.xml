<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>24中设计模式-工厂方法模式</title>
      <link href="2021/01/21/24%E4%B8%AD%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/01/21/24%E4%B8%AD%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 女娲补天的故事大家都听说过吧，今天不说这个，说女娲创造人的故事，可不是“造人”的工作，这个词被现代人滥用了。这个故事是说，女娲在补了天后，下到凡间一看，哇塞，风景太优美了，天空是湛蓝的，水是清澈的，空气是清新的，太美丽了，然后就待时间长了就有点寂寞了，没有动物，这些看的到都是静态的东西呀，怎么办？ </span><br><span class="line">别忘了是神仙呀，没有办不到的事情，于是女娲就架起了八卦炉（技术术语：建立工厂）开始创建人，具体过程是这样的：先是泥巴捏，然后放八卦炉里烤，再扔到地上成长，但是意外总是会产生的： </span><br><span class="line">第一次烤泥人，兹兹兹兹~~，感觉应该熟了，往地上一扔，biu~，一个白人诞生了，没烤熟！ </span><br><span class="line">第二次烤泥人，兹兹兹兹兹兹兹兹~~，上次都没烤熟，这次多烤会儿，往地上一扔，嘿，熟过头了，黑人哪！ </span><br><span class="line">第三次烤泥人，兹~兹~兹~，一边烤一边看着，嘿，正正好，Perfect！优品，黄色人种！【备注:RB 人不属此列】 </span><br><span class="line">这个过程还是比较有意思的，先看看类图：（之前在论坛上有兄弟建议加类图和源文件，以后的模式都会加上去，之前的会一个一个的补充，目的是让大家看着舒服，看着愉悦，看着就想要，就像是看色情小说一样，目标，目标而已，能不能实现就看大家给我的信心了）</span><br></pre></td></tr></table></figure><p>那这个过程我们就用程序来表现，首先定义一个人类的总称： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">package com.cbf4life; </span><br><span class="line">&#x2F;**</span><br><span class="line">* @author cbf4Life cbf4life@126.com</span><br><span class="line">* I&#39;m glad to share my knowledge with you all.</span><br><span class="line">* 定义一个人类的统称</span><br><span class="line">*&#x2F;</span><br><span class="line">public interface Human &#123; </span><br><span class="line">    &#x2F;&#x2F;首先定义什么是人类</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F;人是愉快的，会笑的，本来是想用smile表示，想了一下laugh更合适，好长时间没有大笑了；</span><br><span class="line">    public void laugh(); </span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;人类还会哭，代表痛苦</span><br><span class="line">    public void cry(); </span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;人类会说话</span><br><span class="line">    public void talk(); </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">然后定义具体的人种： </span><br><span class="line"></span><br><span class="line">package com.cbf4life; </span><br><span class="line">&#x2F;**</span><br><span class="line">* @author cbf4Life cbf4life@126.com</span><br><span class="line">* I&#39;m glad to share my knowledge with you all.</span><br><span class="line">* 黄色人种，这个翻译的不准确，将就点吧</span><br><span class="line">*&#x2F;</span><br><span class="line">public class YellowHuman implements Human &#123; </span><br><span class="line"> </span><br><span class="line">    public void cry() &#123; </span><br><span class="line">     System.out.println(&quot;黄色人种会哭&quot;); </span><br><span class="line">     &#125; </span><br><span class="line">    public void laugh() &#123; </span><br><span class="line">     System.out.println(&quot;黄色人种会大笑，幸福呀！&quot;); </span><br><span class="line">     &#125; </span><br><span class="line">    public void talk() &#123; </span><br><span class="line">     System.out.println(&quot;黄色人种会说话，一般说的都是双字节&quot;); </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">白色人种： </span><br><span class="line"></span><br><span class="line">package com.cbf4life; </span><br><span class="line">&#x2F;**</span><br><span class="line">* @author cbf4Life cbf4life@126.com</span><br><span class="line">* I&#39;m glad to share my knowledge with you all.</span><br><span class="line">* 白色人种</span><br><span class="line">*&#x2F;</span><br><span class="line">public class WhiteHuman implements Human &#123; </span><br><span class="line">    public void cry() &#123; </span><br><span class="line">     System.out.println(&quot;白色人种会哭&quot;); </span><br><span class="line">     &#125; </span><br><span class="line">    public void laugh() &#123; </span><br><span class="line">     System.out.println(&quot;白色人种会大笑，侵略的笑声&quot;); </span><br><span class="line">     &#125; </span><br><span class="line">    public void talk() &#123; </span><br><span class="line">     System.out.println(&quot;白色人种会说话，一般都是但是单字节！&quot;); </span><br><span class="line">     &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">黑色人种： </span><br><span class="line"></span><br><span class="line">package com.cbf4life; </span><br><span class="line">&#x2F;**</span><br><span class="line">* @author cbf4Life cbf4life@126.com</span><br><span class="line">* I&#39;m glad to share my knowledge with you all.</span><br><span class="line">* 黑色人种，记得中学学英语，老师说black man是侮辱人的意思，不懂，没跟老外说话</span><br><span class="line">*&#x2F;</span><br><span class="line">public class BlackHuman implements Human &#123; </span><br><span class="line">    public void cry() &#123; </span><br><span class="line">         System.out.println(&quot;黑人会哭&quot;); </span><br><span class="line">     &#125; </span><br><span class="line">    public void laugh() &#123; </span><br><span class="line">     System.out.println(&quot;黑人会笑&quot;); </span><br><span class="line">     &#125; </span><br><span class="line">    public void talk() &#123; </span><br><span class="line">     System.out.println(&quot;黑人可以说话，一般人听不懂&quot;); </span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">人种也定义完毕了，那我们把八卦炉定义出来： </span><br><span class="line"></span><br><span class="line">package com.cbf4life; </span><br><span class="line">import java.util.List; </span><br><span class="line">import java.util.Random; </span><br><span class="line">&#x2F;**</span><br><span class="line">* @author cbf4Life cbf4life@126.com</span><br><span class="line">* I&#39;m glad to share my knowledge with you all.</span><br><span class="line">* 今天讲女娲造人的故事，这个故事梗概是这样的：</span><br><span class="line">* 很久很久以前，盘古开辟了天地，用身躯造出日月星辰、山川草木，天地一片繁华</span><br><span class="line">* One day，女娲下界走了一遭，哎！太寂寞，太孤独了，没个会笑的、会哭的、会说话的东东</span><br><span class="line">* 那怎么办呢？不用愁，女娲，神仙呀，造出来呀，然后捏泥巴，放八卦炉（后来这个成了太白金星的宝</span><br><span class="line">贝）中烤，于是就有了人：</span><br><span class="line">* 我们把这个生产人的过程用Java程序表现出来：</span><br><span class="line">*&#x2F;</span><br><span class="line">public class HumanFactory &#123; </span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F;定一个烤箱，泥巴塞进去，人就出来，这个太先进了</span><br><span class="line">public static Human createHuman(Class c)&#123; </span><br><span class="line"> Human human&#x3D;null; &#x2F;&#x2F;定义一个类型的人类</span><br><span class="line"> </span><br><span class="line"> try &#123; </span><br><span class="line">   human &#x3D; (Human)Class.forName(c.getName()).newInstance(); </span><br><span class="line"></span><br><span class="line"> &#125; catch (InstantiationException e) &#123;</span><br><span class="line"> &#x2F;&#x2F;你要是不说个人种颜色的话，没法烤，要白的黑，你说话了才好烤</span><br><span class="line"> System.out.println(&quot;必须指定人种的颜色&quot;); </span><br><span class="line"> &#125; catch (IllegalAccessException e) &#123; </span><br><span class="line">     &#x2F;&#x2F;定义的人种有问题，那就烤不出来了，这是...</span><br><span class="line">     System.out.println(&quot;人种定义错误！&quot;); </span><br><span class="line"> &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">     &#x2F;&#x2F;你随便说个人种，我到哪里给你制造去？！</span><br><span class="line">     System.out.println(&quot;混蛋，你指定的人种找不到！&quot;); </span><br><span class="line"> &#125; </span><br><span class="line"> return human; </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">然后我们再把女娲声明出来： </span><br><span class="line"></span><br><span class="line">package com.cbf4life; </span><br><span class="line">&#x2F;**</span><br><span class="line">* @author cbf4Life cbf4life@126.com</span><br><span class="line">* I&#39;m glad to share my knowledge with you all.</span><br><span class="line">* 首先定义女娲，这真是额的神呀</span><br><span class="line">*&#x2F;</span><br><span class="line">public class NvWa &#123; </span><br><span class="line">public static void main(String[] args) &#123; </span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F;女娲第一次造人，试验性质，少造点，火候不足，缺陷产品</span><br><span class="line">     System.out.println(&quot;------------造出的第一批人是这样的：白人</span><br><span class="line">    -----------------&quot;); </span><br><span class="line">     Human whiteHuman &#x3D;HumanFactory.createHuman(WhiteHuman.class); </span><br><span class="line">     whiteHuman.cry(); </span><br><span class="line">     whiteHuman.laugh(); </span><br><span class="line">     whiteHuman.talk(); </span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F;女娲第二次造人，火候加足点，然后又出了个次品，黑人</span><br><span class="line">     System.out.println(&quot;\n\n------------造出的第二批人是这样的：黑人-----------------&quot;); </span><br><span class="line">     Human blackHuman &#x3D; HumanFactory.createHuman(BlackHuman.class); </span><br><span class="line">     blackHuman.cry(); </span><br><span class="line">     blackHuman.laugh(); </span><br><span class="line">     blackHuman.talk(); </span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F;第三批人了，这次火候掌握的正好，黄色人种（不写黄人，免得引起歧义），备注：RB人不属于此列</span><br><span class="line"> System.out.println(&quot;\n\n------------造出的第三批人是这样的：黄色人种-----------------&quot;); </span><br><span class="line"> Human yellowHuman &#x3D; HumanFactory.createHuman(YellowHuman.class); </span><br><span class="line"> yellowHuman.cry(); </span><br><span class="line"> yellowHuman.laugh(); </span><br><span class="line"> yellowHuman.talk() </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       这样这个世界就热闹起来了，人也有了，但是这样创建太累了，神仙也会累的，那怎么办？神仙就想了：我塞进去一团泥巴，随机出来一群人，管他是黑人、白人、黄人，只要是人就成（你看看，神仙都偷懒，何况是我们人），看我们的程序修改，先修改 HumanFactory.java，增加了 createHuman()方法： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.cbf4life; </span><br><span class="line">import java.util.List; </span><br><span class="line">import java.util.Random; </span><br><span class="line">public class HumanFactory &#123; </span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F;定一个烤箱，泥巴塞进去，人就出来，这个太先进了</span><br><span class="line">public static Human createHuman(Class c)&#123; </span><br><span class="line">  &#x2F;&#x2F;定义一个类型的人类</span><br><span class="line">    Human human&#x3D;null; </span><br><span class="line"> try &#123; </span><br><span class="line">   human &#x3D; (Human)Class.forName(c.getName()).newInstance(); </span><br><span class="line">   &#x2F;&#x2F;产生一个人种</span><br><span class="line"> &#125; catch (InstantiationException e) &#123;</span><br><span class="line">   &#x2F;&#x2F;你要是不说个人种颜色的话，没法烤，要白的黑，你说话了才好烤</span><br><span class="line">   System.out.println(&quot;必须指定人种的颜色&quot;); </span><br><span class="line"> &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">   &#x2F;&#x2F;定义的人种有问题，那就烤不出来了，这是...</span><br><span class="line"></span><br><span class="line">   System.out.println(&quot;人种定义错误！&quot;); </span><br><span class="line"> &#125; catch (ClassNotFoundException e) &#123; </span><br><span class="line">   &#x2F;&#x2F;你随便说个人种，我到哪里给你制造去？！</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;混蛋，你指定的人种找不到！&quot;); </span><br><span class="line"> &#125; </span><br><span class="line">   return human; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F;女娲生气了，把一团泥巴塞到八卦炉，哎产生啥人种就啥人种</span><br><span class="line">public static Human createHuman()&#123; </span><br><span class="line">   Human human&#x3D;null; &#x2F;&#x2F;定义一个类型的人类</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;首先是获得有多少个实现类，多少个人种</span><br><span class="line">   List&lt;Class&gt; concreteHumanList &#x3D; </span><br><span class="line">  ClassUtils.getAllClassByInterface(Human.class); </span><br><span class="line">    &#x2F;&#x2F;定义了多少人种</span><br><span class="line">   &#x2F;&#x2F;八卦炉自己开始想烧出什么人就什么人 </span><br><span class="line">   Random random &#x3D; new Random(); </span><br><span class="line">   int rand &#x3D; random.nextInt(concreteHumanList.size()); </span><br><span class="line"></span><br><span class="line">   human &#x3D; createHuman(concreteHumanList.get(rand)); </span><br><span class="line"></span><br><span class="line">   return human; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看女娲是如何做的： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.cbf4life; </span><br><span class="line">&#x2F;**</span><br><span class="line">* @author cbf4Life cbf4life@126.com</span><br><span class="line">* I&#39;m glad to share my knowledge with you all.</span><br><span class="line">* 首先定义女娲，这真是额的神呀</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">public class NvWa &#123; </span><br><span class="line">public static void main(String[] args) &#123; </span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F;女娲第一次造人，试验性质，少造点，火候不足，缺陷产品</span><br><span class="line"> System.out.println(&quot;------------造出的第一批人是这样的：白人</span><br><span class="line">-----------------&quot;); </span><br><span class="line">   Human whiteHuman &#x3D; HumanFactory.createHuman(WhiteHuman.class); </span><br><span class="line">   whiteHuman.cry(); </span><br><span class="line">   whiteHuman.laugh(); </span><br><span class="line">   whiteHuman.talk(); </span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F;女娲第二次造人，火候加足点，然后又出了个次品，黑人</span><br><span class="line"> System.out.println(&quot;\n\n------------造出的第二批人是这样的：黑人</span><br><span class="line">-----------------&quot;); </span><br><span class="line"> Human blackHuman &#x3D; HumanFactory.createHuman(BlackHuman.class); </span><br><span class="line">   blackHuman.cry(); </span><br><span class="line">   blackHuman.laugh(); </span><br><span class="line">   blackHuman.talk(); </span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F;第三批人了，这次火候掌握的正好，黄色人种（不写黄人，免得引起歧义），备注：RB人不属于此列</span><br><span class="line"> System.out.println(&quot;\n\n------------造出的第三批人是这样的：黄色人种</span><br><span class="line">-----------------&quot;); </span><br><span class="line">   Human yellowHuman &#x3D; HumanFactory.createHuman(YellowHuman.class); </span><br><span class="line">   yellowHuman.cry(); </span><br><span class="line">   yellowHuman.laugh(); </span><br><span class="line">   yellowHuman.talk(); </span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F;女娲烦躁了，爱是啥人种就是啥人种，烧吧</span><br><span class="line"> </span><br><span class="line">   for(int i&#x3D;0;i&lt;10000000000;i++)&#123; </span><br><span class="line">   System.out.println(&quot;\n\n------------随机产生人种了-----------------&quot; + i); </span><br><span class="line">   Human human &#x3D; HumanFactory.createHuman(); </span><br><span class="line">   human.cry(); </span><br><span class="line">   human.laugh(); </span><br><span class="line">   human.talk(); </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哇，这个世界热闹了！，不过还没有完毕，这个程序你跑不起来，还要有这个类： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">package com.cbf4life; </span><br><span class="line">import java.io.File; </span><br><span class="line">import java.io.IOException; </span><br><span class="line">import java.net.URL; </span><br><span class="line">import java.util.ArrayList; </span><br><span class="line">import java.util.Enumeration; </span><br><span class="line">import java.util.List; </span><br><span class="line">&#x2F;**</span><br><span class="line">* @author cbf4Life cbf4life@126.com I&#39;m glad to share my knowledge with you</span><br><span class="line">* all.</span><br><span class="line">* </span><br><span class="line">*&#x2F;</span><br><span class="line">@SuppressWarnings(&quot;all&quot;) </span><br><span class="line">public class ClassUtils &#123; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;给一个接口，返回这个接口的所有实现类</span><br><span class="line">public static List&lt;Class&gt; getAllClassByInterface(Class c)&#123; </span><br><span class="line">   List&lt;Class&gt; returnClassList &#x3D; new ArrayList&lt;Class&gt;(); </span><br><span class="line"> &#x2F;&#x2F;返回结果</span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F;如果不是一个接口，则不做处理</span><br><span class="line"> if(c.isInterface())&#123; </span><br><span class="line">   String packageName &#x3D; c.getPackage().getName(); </span><br><span class="line">   &#x2F;&#x2F;获得当前的包名</span><br><span class="line"> try &#123; </span><br><span class="line">   List&lt;Class&gt; allClass &#x3D; getClasses(packageName);</span><br><span class="line">   &#x2F;&#x2F;获得当前包下以及子包下的所有类</span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F;判断是否是同一个接口</span><br><span class="line">   for(int i&#x3D;0;i&lt;allClass.size();i++)&#123; </span><br><span class="line">     if(c.isAssignableFrom(allClass.get(i)))&#123; </span><br><span class="line">     &#x2F;&#x2F;判断是不是一个接口</span><br><span class="line">       if(!c.equals(allClass.get(i)))&#123; </span><br><span class="line">       &#x2F;&#x2F;本身不加进去</span><br><span class="line">       returnClassList.add(allClass.get(i)); </span><br><span class="line">       &#125; </span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; catch (ClassNotFoundException e) &#123; </span><br><span class="line">   e.printStackTrace(); </span><br><span class="line"> &#125; catch (IOException e) &#123; </span><br><span class="line">   e.printStackTrace(); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> return returnClassList; </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;从一个包中查找出所有的类，在jar包中不能查找</span><br><span class="line">private static List&lt;Class&gt; getClasses(String packageName) </span><br><span class="line"> throws ClassNotFoundException, IOException &#123; </span><br><span class="line">   ClassLoader classLoader &#x3D; Thread.currentThread().getContextClassLoader(); </span><br><span class="line">   String path &#x3D; packageName.replace(&#39;.&#39;, &#39;&#x2F;&#39;); </span><br><span class="line">   Enumeration&lt;URL&gt; resources &#x3D; classLoader.getResources(path); </span><br><span class="line">   List&lt;File&gt; dirs &#x3D; new ArrayList&lt;File&gt;(); </span><br><span class="line">   while (resources.hasMoreElements()) &#123; </span><br><span class="line">     URL resource &#x3D; resources.nextElement(); </span><br><span class="line">     dirs.add(new File(resource.getFile())); </span><br><span class="line"> &#125; </span><br><span class="line">   ArrayList&lt;Class&gt; classes &#x3D; new ArrayList&lt;Class&gt;(); </span><br><span class="line">   for (File directory : dirs) &#123; </span><br><span class="line">     classes.addAll(findClasses(directory, packageName)); </span><br><span class="line"> &#125; </span><br><span class="line"> return classes; </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">private static List&lt;Class&gt; findClasses(File directory, String packageName) </span><br><span class="line">throws ClassNotFoundException &#123; </span><br><span class="line">   List&lt;Class&gt; classes &#x3D; new ArrayList&lt;Class&gt;(); </span><br><span class="line">   if (!directory.exists()) &#123; </span><br><span class="line">     return classes; </span><br><span class="line"> &#125; </span><br><span class="line">   File[] files &#x3D; directory.listFiles(); </span><br><span class="line">   for (File file : files) &#123; </span><br><span class="line">     if (file.isDirectory()) &#123; </span><br><span class="line">       assert !file.getName().contains(&quot;.&quot;); </span><br><span class="line">     classes.addAll(findClasses(file, packageName + &quot;.&quot; + </span><br><span class="line">file.getName())); </span><br><span class="line"> &#125; else if (file.getName().endsWith(&quot;.class&quot;)) &#123; </span><br><span class="line"> classes.add(Class.forName(packageName + &#39;.&#39; + </span><br><span class="line">file.getName().substring(0, file.getName().length() - 6))); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> return classes; </span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>​     告诉你了，这个 ClassUtils 可是个宝，用处可大了去了，可以由一个接口查找到所有的实现类，也可以由父类查找到所有的子类。 我们来总结一下，特别是增加了 createHuman()后，是不是这个工厂的扩展性更好了？你看你要再加一个人种，只要你继续集成 Human 接口成了，然后啥都不用修改就可以生产了，具体产多少，那要八卦炉说了算，简单工厂模式就是这么简单，那我们再引入一个问题：人是有性别的呀，有男有女，你这怎么没区别，别急，这个且听下回分解！<br>​       工厂方法模式还有一个非常重要的应用，就是延迟始化(Lazy initialization)，什么是延迟始化呢？一个对象初始化完毕后就不释放，等到再次用到得就不用再次初始化了，直接从内存过中拿到就可以了，怎么实现呢，很简单，看例子：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.cbf4life.advance; </span><br><span class="line">import java.util.HashMap; </span><br><span class="line">&#x2F;**</span><br><span class="line">* @author cbf4Life cbf4life@126.com</span><br><span class="line">* I&#39;m glad to share my knowledge with you all.</span><br><span class="line">*&#x2F;</span><br><span class="line">@SuppressWarnings(&quot;all&quot;) </span><br><span class="line">public class HumanFactory &#123; </span><br><span class="line">     &#x2F;&#x2F;定义一个MAP,初始化过的Human对象都放在这里</span><br><span class="line">    private static HashMap&lt;String,Human&gt; humans &#x3D; new HashMap&lt;String,Human&gt;(); </span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;定一个烤箱，泥巴塞进去，人就出来，这个太先进了</span><br><span class="line">public static Human createHuman(Class c)&#123; </span><br><span class="line"> Human human&#x3D;null; &#x2F;&#x2F;定义一个类型的人类</span><br><span class="line"> </span><br><span class="line"> try &#123; </span><br><span class="line"> &#x2F;&#x2F;如果MAP中有，则直接从取出，不用初始化了</span><br><span class="line">   if(humans.containsKey(c.getSimpleName()))&#123; </span><br><span class="line">     human &#x3D; humans.get(c.getSimpleName()); </span><br><span class="line">   &#125;else&#123; </span><br><span class="line">     human &#x3D; (Human)Class.forName(c.getName()).newInstance(); </span><br><span class="line">     &#x2F;&#x2F;放到MAP中</span><br><span class="line">     humans.put(c.getSimpleName(), human); </span><br><span class="line">   &#125; </span><br><span class="line"> &#125; catch (InstantiationException e) &#123;</span><br><span class="line"> &#x2F;&#x2F;你要是不说个人种颜色的话，没法烤，要白的黑，你说话了才好烤</span><br><span class="line">   System.out.println(&quot;必须指定人种的颜色&quot;); </span><br><span class="line"> &#125; catch (IllegalAccessException e) &#123; </span><br><span class="line">   &#x2F;&#x2F;一定定义的人种有问题，那就烤不出来了，这是...</span><br><span class="line">     System.out.println(&quot;人种定义错误！&quot;); </span><br><span class="line"> &#125; catch (ClassNotFoundException e) &#123; </span><br><span class="line">   &#x2F;&#x2F;你随便说个人种，我到哪里给你制造去？！</span><br><span class="line"> </span><br><span class="line">   System.out.println(&quot;混蛋，你指定的人种找不到！&quot;); </span><br><span class="line"> &#125; </span><br><span class="line">   return human; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></blockquote><p>很简单，就加上了上边的<strong>if …else</strong>部分的代码，这个在类初始化很消耗资源的情况比较实用，比如你要连接硬件，或者是为了初始化一个类需要准备比较多条件（参数），通过这种方式可以很好的减少项目的复杂程度。以上便是工厂方法模式的介绍了</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS3 </tag>
            
            <tag> Games </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Layui</title>
      <link href="2021/01/21/Layui/"/>
      <url>2021/01/21/Layui/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h5 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layui（谐音：类UI) 是一款采用自身模块规范编写的前端 UI 框架，遵循原生 HTML&#x2F;CSS&#x2F;JS 的书写与组织形式，门槛极低，拿来即用。其外在极简，却又不失饱满的内在，体积轻盈，组件丰盈，从核心代码到 API 的每一处细节都经过精心雕琢，非常适合界面的快速开发。layui 首个版本发布于 2016 年金秋，她区别于那些基于 MVVM 底层的 UI 框架，却并非逆道而行，而是信奉返璞归真之道。准确地说，她更多是为后端程序员量身定做，你无需涉足各种前端工具的复杂配置，只需面对浏览器本身，让一切你所需要的元素与交互，从这里信手拈来。</span><br></pre></td></tr></table></figure><p>下载:</p><p>1、在官网上下载</p><p>官网地址:<a href="https://www.layui.com/">https://www.layui.com/</a></p><p>​    下载后的目录如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├─css &#x2F;&#x2F;css目录</span><br><span class="line">  │  │─modules &#x2F;&#x2F;模块css目录（一般如果模块相对较大，会单独提取，比如下面三个：）</span><br><span class="line">  │  │  ├─laydate</span><br><span class="line">  │  │  ├─layer</span><br><span class="line">  │  │  └─layim</span><br><span class="line">  │  └─layui.css &#x2F;&#x2F;核心样式文件</span><br><span class="line">  ├─font  &#x2F;&#x2F;字体图标目录</span><br><span class="line">  ├─images &#x2F;&#x2F;图片资源目录（目前只有layim和编辑器用到的GIF表情）</span><br><span class="line">  │─lay &#x2F;&#x2F;模块核心目录</span><br><span class="line">  │  └─modules &#x2F;&#x2F;各模块组件</span><br><span class="line">  │─layui.js &#x2F;&#x2F;基础核心库</span><br><span class="line">  └─layui.all.js &#x2F;&#x2F;包含layui.js和所有模块的合并文件</span><br></pre></td></tr></table></figure><p>2、Git 仓库下载</p><p>  可以通过 <a href="https://github.com/sentsin/layui/">GitHub</a> 或 <a href="https://gitee.com/sentsin/layui">码云</a> 得到 layui 的完整开发包，以便于你进行二次开发，或者 Fork layui 为我们贡献方案</p><p>GitHub:<a href="https://github.com/sentsin/layui/">https://github.com/sentsin/layui/</a></p><p>码云:<a href="https://gitee.com/sentsin/layui/">https://gitee.com/sentsin/layui/</a></p><p>3、npm 安装，在你需要下载的文件下打开Git Bash Here,在里边输入以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i layui-src</span><br></pre></td></tr></table></figure><p>这样Layui就下载好了</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS3 </tag>
            
            <tag> Games </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑篇(二)</title>
      <link href="2021/01/12/%E9%80%BB%E8%BE%91%E7%AF%87-%E4%BA%8C/"/>
      <url>2021/01/12/%E9%80%BB%E8%BE%91%E7%AF%87-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>1、在某城，居民们的头发数目是随机的,假设以下关于居民的断定都是事实:<br>1．没有两个居民的头发数量正好一样多。<br>2．没有一个居民的头发大于517根。<br>3．居民的总数比任何一个居民的头发数还要多。那么,该城居民的总数最多不可能超过多少人?<br>A、517        B、518        C.519        D、520</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  根据题意，每个居民头发数量都不一样，而且最多是517根。因为居民总数比任一个头发数都要多，为了让居民总数尽可能大，那最大的头发数应取517。</span><br><span class="line">  也就是至少要518人，这时每个人的头发数量是：0、1、2、...、517。</span><br><span class="line">而且，也不能超过518人，否则最大的头发数就不是517了。</span><br><span class="line">所以居民总数最多不超过518人。</span><br></pre></td></tr></table></figure><p>2、在非洲某个地区有两个奇怪的部落，第一个部落的人每逢周一、三、五就说谎，另一个部落的人每逢周二、四、六就说谎，在其他的日子他们都说实话。有一天，一位探险家来到这个奇怪的地区，见到了两个人，他们分别属于这两个部落。探险家向他们询问今天是星期几,两个人并没有明确告诉他，都只是说了同一句话:“前天是我说谎的日子。”那么，这一天究竟是星期几呢?</p><p>A、星期一        B、星期三         C、星期六        D、星期日</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用假设法来解决。</span><br><span class="line">假设这两人为AB，A在一三五为假，B在二四六为假，AB在星期日都为真。</span><br><span class="line">如果AB都为真，那只可能是星期日，那前天就是五，这一天B说真话，跟“我说谎”矛盾，所以假设不对。</span><br><span class="line">如果A真B假，那只能是二四六，那前天就是日二四，这一天A都为真，跟“我说谎”矛盾，所以假设不对。</span><br><span class="line">如果A假B真，那只能是一三五。如果是一，那前天是六，这一天A为真，B为假，符合条件。如果是三五，那前天是一三，B都为真，跟“我说谎”矛盾，假设不对。</span><br><span class="line">如果AB都为假，不存在这一天，假设不对。</span><br><span class="line">所以，只有星期一符合条件。</span><br></pre></td></tr></table></figure><p>海滩上有20只萌妹纸，其中:<br>(1) 有的人会游泳;<br>(2）有的人不会游泳;<br>(3) 年纪最小的妹纸不会游泳。<br>以上三句描述只有一句是对的。海滩上到底有几个人会游泳呢?<br>A、0        B、1         C、19        D、20</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   认为3描述的是对的只有一人不会游泳. 1 2 都无法判断数字 但也同时承认有一个不会游泳 2 有点人不会游泳就成立. 以上3句就不成立. 3绝对是错的.</span><br><span class="line">有点人会游泳和有的人不会游泳 在以上3句的支持下 只有一个是对的,就是说这两个绝对的矛盾,单看句子就会认为有会的有不会的但他不是一句,而是两个不同的判定,在以上3句的支持下可以解读为会游泳的和不会游泳的两类,分析3有个不会游泳的小孩是错的,那就是说全会游泳是对的.</span><br><span class="line">我认为有20个人你会游泳.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>村子里有两种人:一种是只说真话的老实人,一种是只说假话的骗子。<br>这天，我来到村子，想知道这个村子有几个骗子。<br>中午吃饭的时候，全村人都围坐在一个大大的圆餐桌旁。<br>我向每个人都问了一个同样的问题:“你左边的那个人是不是骗子?<br>每个人都回答:“是。”<br>我问村支书:“村子一共有多少人?””，村支书说有25人。<br>午餐后，我向村里的会计了解更多情况,<br>会计说:“村里一共有36人，村支书是骗子。”<br>请问，这个村子一共有多少个骗子?<br>A、12         B、13         C、18        D、25</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">答案是C，即18个骗子。</span><br><span class="line">所有人围在一起，都说左边的人是骗子，所以不可能两个骗子或老实人挨在一起，一定是交叉来坐，而且人数不能是单数（如果是单数就一定出现两骗子或两老实人挨在一起）。</span><br><span class="line">村支书说有25人，是单数，所以村支书是骗子。</span><br><span class="line">因为骗子不会说骗子是骗子，所以会计是老实人。</span><br><span class="line">所以村子有36人，一半是骗子，所以18人是骗子。</span><br></pre></td></tr></table></figure><p>有一个大门的门铃很特别，它有六个按钮，其中五个按钮是假的，只有一个是真的。<br>只要按错(哪怕同时按)门铃系统就会停止工作。<br>在大门的按钮旁边贴有一张告示，上面写着:”A在B左边;B是C的右边第三个;C在D的右边;D紧靠着E;E和A中间隔一个按钮。来者请按没有提到的那个按钮。”<br>请问，哪个是门铃的真正按钮?<br>A、左1        B、左2        C、左3        D、左4        E、左5        F、左6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不会</span><br></pre></td></tr></table></figure><p>据说亚里士多德学院门口竖着一块牌子,上面写着:“不懂逻辑者不得入内”。<br>一天你到访学院却被拦在门外,<br>门卫说:“牌子上的规矩会被严格执行,请你看清楚。”<br>这时,你觉得以下哪项最可能让你进去学院?<br>A、告诉门卫你是学院院长请来研究学术的。<br>B、告诉门卫你不懂逻辑但也可以进去。<br>C、告诉门卫你懂逻辑所以不能不放你进去。<br>D、告诉门卫你懂逻辑，然后微笑看着门卫。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">答案选A</span><br><span class="line">由题干2113“不懂逻辑者不得5261入内”可知“4102入内就一定懂逻辑”</span><br><span class="line">我们用1653数学模版式表示：入内 →权 懂逻辑</span><br><span class="line">已知 A → B，根据逻辑推理学可知：若A真则B真，若B假则A假。若B真，A则真假不定。</span><br><span class="line">举个例子说：如果天下雨（A），那么地就滑（B）。</span><br><span class="line">那么我们会得到以下结论：下雨→ 地滑 ；或者是：地不滑→ 天没下雨</span><br><span class="line">但是我们不能得到：地滑了，天就一定下雨（地滑→ 下雨）×</span><br><span class="line">比如说天没下雨，我倒些水去，地一样滑，所以地滑不能得到下雨。</span><br><span class="line">所以：（地滑→ 下雨）是错误的</span><br><span class="line">同样道理，现在我们从题干中知道一群人“懂逻辑”了，却不能推出“入内”。</span><br><span class="line">所以答案应该是“不一定入内”，也就是说“可能入内”，也“可能不入内”。</span><br><span class="line">因此所有肯定的说法都是错误的，即BCD为假。</span><br><span class="line">所以：答案选A</span><br></pre></td></tr></table></figure><p>张老师的班里有60个学生，男女各占一半。有40个学生喜欢数学,有50个学生喜欢语文。这表明可能会有:<br>A.20个男生喜欢数学而不喜欢语文<br>B.20个喜欢语文的男生不喜欢数学<br>C.30个喜欢语文的女生不喜欢数学<br>D.30个喜欢数学的男生只有10个喜欢语文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A选项是错的，因为已有50个学生喜欢语文了，只有10个学生不喜欢语文而非20个，所有A应排除；C选项也属此类，因为只能有20个学生不喜欢数学而非30个，所以C选项也应排除；D选项30个喜欢数学的男生，只有10个喜欢语文也是错误的，这样至少有20个学生不喜欢语文了，与陈述亦有矛盾，故C也应排除；只有B选项是对的，20个喜欢语文的学生不喜欢数学，因为数学可以有20人不喜欢的。故本题的正确答案为B</span><br></pre></td></tr></table></figure><p>只要诊断准确并且救治及时,那么这个病人就不会死亡。<br>现在这个病人不幸死亡了。如果上述断定是真的，下面哪项也一定是真的()<br>A．对这个病人诊断不准确,但救治及时<br>B.对这个病人诊断是准确的,但救治不及时<br>C.如果这个病人死亡的原因是诊断不准确,那么救治不及时不会是原因<br>D.如果这个病人的诊断是准确的,那么,造成死亡的原因一定是救治不及时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由“只要诊断准确并且救治及时，这个病人就不会死亡”和“现在这个病人不幸死亡了”，可得：诊断不准确或者救治不及时。从这个断定出发，运用选言推理的否定肯定式，可以推出如果诊断准确，则救治不及时。</span><br></pre></td></tr></table></figure><p>任何企业,只有诚信,才能发展。以下各项都符合题干的条件,除了:<br>A.任何企业,如果得到发展，则一定诚信。<br>B.任何企业,不可能发展但不诚信。<br>C.任何企业,除非诚信,否则不能发展。<br>D.任何企业,或者诚信,或者不发展。<br>E.任何企业，不可能诚信但不发展。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A、B、C、D都是题干的变形表达，表达的意思都是一样的，把“诚信”作为“发展”的必要条件。所以选E。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人博客</title>
      <link href="2020/12/30/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/12/30/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>余文</title>
      <link href="2020/12/11/%E4%BD%99%E6%96%87/"/>
      <url>2020/12/11/%E4%BD%99%E6%96%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
